/* rh-iconfont v 1.0.0  */


// To import into your build system, @include dist/assets/rh-iconfont
// The following 3 mixins are availabe to you
//    @mixin print-rh-iconfont-font-face()
//      This mixin prints the @font-face with relative paths of "../fonts/"
//    @mixin print-rh-iconfont-classes()
//      This mixin prints all of the CSS classes needed to apply icons with class names
//    @mixin print-rh-iconfont-all()
//      This mixin prints both of the previous mixins


@mixin rh-icon-font-styles {
    font-family: '<%= fontFamilyName %>';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// Sass mixins to print CSS classes and font-face for icon font


@mixin print-rh-iconfont-classes() {

    // extend HTML class for icon base
    .rh-web-icon:before,
    .rh-icon:before,
    .web-icon:before,
    [class$="web-icon"]:before,
    [class*="web-icon "]:before,
    [class^="web-icon"]:before,
    [class$="rh-web-icon"]:before,
    [class*="rh-web-icon "]:before,
    [class^="rh-web-icon"]:before,
    [class$="rh-icon"]:before,
    [class*="rh-icon "]:before,
    [class^="rh-icon"]:before {
       @include rh-icon-font-styles;
    }

    @each $glyph, $data in $glyphmap {
        .#{$glyph}:before {
            content: map-get($data, location);
        }
    }
}

@mixin print-rh-iconfont-font-face() {
    @font-face {
      font-family: '<%= fontFamilyName %>';
      src: <%= fontSrc1 %>;
      src: <%= fontSrc2 %>;
      font-weight: normal;
      font-style: normal;
    }
}

// Combo Mixin to print above 2

@mixin print-rh-iconfont-all() {
    @include print-rh-iconfont-font-face();
    @include print-rh-iconfont-classes();
}


// Mixin for applying an icon to the before or after pseudo element of your selector

@mixin get-icon($name, $position: 'before') {
   &:#{$position} {
        content: map-get(map-get($glyphmap, $name), location);
        @include rh-icon-font-styles;
    }
    @content;
}






$glyphmap:(  <% for (var glyphIdx = 0; glyphIdx < glyphs.length; glyphIdx++) { %>
  <%= glyphs[glyphIdx] %>: ('location': "\<%= codepoints[glyphIdx] %>"),

  <% } %>
);





